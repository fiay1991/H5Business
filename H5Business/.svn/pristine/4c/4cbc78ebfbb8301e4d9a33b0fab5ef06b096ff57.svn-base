package com.park.h5business.service.cardpay.impl;

import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;

import com.park.h5business.dao.ParkDao;
import com.park.h5business.profile.URLProfile;
import com.park.h5business.request.UnifiedorderRequest;
import com.park.h5business.response.Response;
import com.park.h5business.response.WeiXinMicroResponse;
import com.park.h5business.service.PHPCommService;
import com.park.h5business.tools.DateChangeTools;
import com.park.h5business.tools.DateTools;
import com.park.h5business.tools.HttpJsonTools;
import com.park.h5business.tools.MoneyTool;
import com.park.h5business.tools.SignTools;

/**
 * 
 * @author WangYuefei
 *
 */
public class MicroPayThread implements Runnable {
	
	private Logger logger = LoggerFactory.getLogger(this.getClass());
	
	private float unpayPrice;
	private String parkid;
	private String order_num_pay;
	private String trade_type; //两个值：WEIXIN ZHIFUBAO
	private String auth_code;
	private String ipAddress;
	
	@Resource(name="phpCommServiceImpl")
	private PHPCommService phpCommService;
	@Resource(name="parkDaoImpl")
    private ParkDao parkDao;
	
	@Autowired
	URLProfile urlProfile;
	
	public MicroPayThread(float unpayPrice, String parkid, String order_num_pay, String trade_type, String auth_code, String ipAddress) {
		super();
		this.unpayPrice = unpayPrice;
		this.parkid = parkid;
		this.trade_type = trade_type;
		this.auth_code = auth_code;
		this.ipAddress = ipAddress;
	}

	@Override
	public void run() {
		UnifiedorderRequest requestInfo = getRequestInfo();
		microPay(requestInfo);
	}
	
	/**
	 * 整理请求参数
	 * @return
	 */
	public UnifiedorderRequest getRequestInfo(){
		UnifiedorderRequest requestInfo = new UnifiedorderRequest();
		requestInfo.setBody("停车费");
		requestInfo.setOut_trade_no(order_num_pay);
		requestInfo.setParkid(parkid);
		requestInfo.setTerminal_type("CDP");
		requestInfo.setTotal_fee(MoneyTool.fromYuanToFen(String.valueOf(unpayPrice)));
		requestInfo.setAuth_code(auth_code);
		requestInfo.setTrade_type(trade_type);
		requestInfo.setCreate_ip(ipAddress);
		return requestInfo;
	}
	
	/**
	 * 执行刷卡支付
	 * @param requestInfo
	 * @return
	 */
	public String microPay(UnifiedorderRequest requestInfo) {
		String requestURL = urlProfile.getUnifiedOrder() + "cardpay";
		// 获取车场的parkkey
		String key = parkDao.getParkKey(parkid);
		/**
		 * 签名认证  header中需要传入的参数
		 */
		Map<String, String> map = new HashMap<String, String>();
		map.put("Timestamp", DateTools.nowDate());
		map.put("Authorization", SignTools.encrypt(DateTools.nowDate() + requestURL+key, key));
		String result = HttpJsonTools.HttpClientPost(requestURL, DateChangeTools.bean2gson(requestInfo), map);
		logger.error("** 刷卡支付支付 - 返回结果:" + result);
		if (null ==result ||  "".equals(result)) {
			logger.error("** 刷卡支付支付 - 返回结果为空。");
			return "FAIL";
		}
		Response resultResp =DateChangeTools.gson2bean(result, Response.class);
		// 判断返回结果
		if(null != resultResp && "2000".equals(resultResp.getResult_code())) {
			// 更新支付状态
			WeiXinMicroResponse wxMicroResp = DateChangeTools.gson2bean(resultResp.getObject().toString(), WeiXinMicroResponse.class);
			phpCommService.updateOrder(wxMicroResp.getOut_trade_no(), MoneyTool.fromFenToYuan(wxMicroResp.getTotal_fee()), 0, 0.0F);
			return "SUCCESS";
		}else if(null != resultResp && "10003".equals(resultResp.getResult_code())) {
			try {
				// 查询订单支付结果，每隔5s查询一次，30s超时
				for(int i = 0; i < 3; i++) {
					Thread.sleep(5000);
					boolean queryOrderResult = queryAndOffOrder(requestInfo, "queryorderfrom");
					if(queryOrderResult) {
						return "SUCCESS";
					}
				}
				offOrderLoop(requestInfo);
				return "FAIL";
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		offOrderLoop(requestInfo);
		return "FAIL";
	}
	
	/**
	 * 调取PayCenter查询订单
	 * @param requestInfo
	 */
	public boolean queryAndOffOrder(UnifiedorderRequest requestInfo, String urlSuf) {
		String logPre = "";
		if("queryorderfrom".equals(urlSuf)) {
			logPre = "** 刷卡支付查询";
		}else if("offorder".equals(urlSuf)) {
			logPre = "** 刷卡支付关单";
		}
		String requestURL = urlProfile.getUnifiedOrder() + urlSuf;
		// 获取车场的parkkey
		String key = parkDao.getParkKey(parkid);
		/**
		 * 签名认证  header中需要传入的参数
		 */
		Map<String, String> map = new HashMap<String, String>();
		map.put("Timestamp", DateTools.nowDate());
		map.put("Authorization", SignTools.encrypt(DateTools.nowDate() + requestURL+key, key));
		String result = HttpJsonTools.HttpClientPost(requestURL, DateChangeTools.bean2gson(requestInfo), map);
		logger.error(logPre + " - 返回结果:" + result);
		if (null == result ||  "".equals(result)) {
			logger.error(logPre + " - 返回结果为空。");
			return false;
		}
		Response resultResp =DateChangeTools.gson2bean(result, Response.class);
		if(null != resultResp && "2000".equals(resultResp.getResult_code())) {
			return true;
		}
		return false;
	}
	
	/**
	 * 用来执行offOrder的方法
	 * @param requestInfo
	 */
	public void offOrderLoop(UnifiedorderRequest requestInfo) {
		try {
			Thread.sleep(15000);
			boolean offOrderResult = queryAndOffOrder(requestInfo, "offorder");
			if(!offOrderResult) {
				Thread.sleep(5000);
				queryAndOffOrder(requestInfo, "offorder");
			}
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}
	
}
