package com.park.scanpay.service.impl.noplate;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.ui.Model;

import com.park.base.common.DateTools;
import com.park.base.common.ToolsUtil;
import com.park.scanpay.config.constants.NoPlateConstants;
import com.park.scanpay.dao.impl.noplate.NoPlateDaoImpl;
import com.park.scanpay.domain.noplate.NoPlateRecord;
import com.park.scanpay.factory.DestributeFactory;
import com.park.scanpay.profile.URLProfile;
import com.park.scanpay.response.NoPlateEnterResponse;
import com.park.scanpay.response.NoPlateExitResponse;
import com.park.scanpay.response.OrderResponse;
import com.park.scanpay.service.BusinessService;
import com.park.scanpay.service.PHPCommService;
import com.park.scanpay.service.PlateService;
import com.park.scanpay.service.impl.CloudCoreServiceImpl;
import com.park.scanpay.service.noplate.NoPlateService;
import com.park.scanpay.tools.BackResultTools;
import com.park.scanpay.tools.DateChangeTools;
import com.park.scanpay.tools.StringTool;
import com.park.scanpay.vo.ScanpayVO;

/**
 * 无牌车进出场
 * @author fangct created on 2017年12月15日
 */
@Repository(value = "noPlateServiceImpl")
public class NoPlateServiceImpl implements NoPlateService {

	private Logger logger = LoggerFactory.getLogger(this.getClass());

	@Autowired
	URLProfile urlProfile;

	@Resource(name = "destributeFactory")
	private DestributeFactory destributeFactory;

	@Resource(name = "noPlateDaoImpl")
	private NoPlateDaoImpl noPlateDaoImpl;

	@Resource(name = "phpCommServiceImpl")
	private PHPCommService phpCommService;

	@Resource(name = "plateServiceImpl")
	private PlateService plateService;
	
	@Resource(name = "cloudCoreServiceImpl")
	private CloudCoreServiceImpl cloudCoreServiceImpl;
	
	//无牌车进场
	private final String BUSSINESS_CODE_ENTER = "10";
	//无牌车离场
	private final String BUSSINESS_CODE_EXIT = "11";
	//开关闸成功的状态
	private final String STAUTS_SUCCESS = "1";
	
	/**
	 * @param code
	 * @param parkid
	 * @param channelid
	 * @param type
	 * @param ver
	 * @param useragent
	 * @param useragent2 
	 * @param model
	 * @return
	 */
	public String entering(String alicode,String code, String parkid, String channelid, String type, String ver, String useragent,
			 Model model) {
		String msg = "无牌车进场失败，请稍后重试";// 默认错误信息提示
		String page = "h5_error";// 默认跳转页面

		/*** 验证参数 */
		if (parkid != null && !parkid.equals("") && channelid != null && !channelid.equals("")) {
			BusinessService bs = destributeFactory.create(useragent);
			String openid = bs.generateOpenid(alicode, code);
			
			// 将部分参数放入页面
			model.addAttribute("openid", openid);
			model.addAttribute("enexType", NoPlateConstants.进场.getValue());
			model.addAttribute("parkid", parkid);

			NoPlateEnterResponse response = new NoPlateEnterResponse();
			//获取临时车牌号
			String temp_plate = cloudCoreServiceImpl.generateTempPlate();
			if (temp_plate != null && temp_plate.length() > 0) {
				response.setTempPlate(temp_plate);
			}else {
				msg += "(参数错误)";
				return BackResultTools.setValue(page, msg, model);
			}
			
			//获取车场名称
			String parkName = cloudCoreServiceImpl.findParkName(parkid);
			if (parkName != null && parkName.length() > 0) {
				response.setParkName(parkName);
			}else {
				msg += "(参数错误)";
				return BackResultTools.setValue(page, msg, model);
			}
			
			String enter_time = DateTools.Date();
			response.setTempPlate(temp_plate);
			response.setChannelId(channelid);
			response.setEnterTime(enter_time);

			logger.info("***无牌车进场-生成数据, {}", response.toString());
			return BackResultTools.setValue("h5_into", response, "page", model);
		} else {
			logger.error("参数为空.." + "parkid=" + parkid + "** channelid=" + channelid);
			msg += "(参数为空)";
			return BackResultTools.setValue(page, msg, model);
		}
	}

	/**
	 * 无牌车开闸放行
	 * @param parkid
	 * @param channelId
	 * @param parkName
	 * @param tempPlate
	 * @param enterTime
	 * @param openid
	 * @param model
	 * @return
	 */
	public String sendEnter(String parkid, String en_channelId, String parkName, String tempPlate, String enterTime, String openid, Model model) {
		Map<String, String> resultMap = new HashMap<String, String>();

		/*** 验证参数 */
		if (ToolsUtil.isNotNull(parkid) && ToolsUtil.isNotNull(en_channelId) && ToolsUtil.isNotNull(tempPlate)
				&& ToolsUtil.isNotNull(enterTime) && ToolsUtil.isNotNull(openid)) {

			NoPlateRecord record = new NoPlateRecord();
			record.setPark_id(Integer.parseInt(parkid));
			record.setPark_name(parkName);
			record.setEn_channel_id(en_channelId);
			record.setEnter_time(enterTime);
			record.setTemp_plate(tempPlate);
			record.setOpenid(openid);

			//保存进场数据
			int id = noPlateDaoImpl.insertEnterInfo(record);
			if (id > 0) {
				logger.info("***无牌车进场-数据写入成功, {}", record.toString());
				if (findOpenStatus(parkid, BUSSINESS_CODE_ENTER, "" + id, tempPlate)) {
					resultMap.put("status_code", "200");
					resultMap.put("url", "/opensuccess");
					return DateChangeTools.bean2gson(resultMap);
				}
			}
		}else {
			logger.info("必填参数为空..parkid:{}, channelId:{}, tempPlate:{}, enterTime:{},openid:{}", parkid, en_channelId,
					tempPlate, enterTime, openid);
		}
		resultMap.put("status_code", "403");
		resultMap.put("url", "/openfail");
		return DateChangeTools.bean2gson(resultMap);
	}
	/**
	 * 查询开闸结果
	 * @param parkid
	 * @param business_code
	 * @param business_key
	 * @param tempPlate
	 * @return
	 */
	private boolean findOpenStatus(String parkid, String business_code, String business_key, String tempPlate){
		Map<String, String> params = new HashMap<String, String>();
		params.put("park_id", parkid);
		params.put("business_code", business_code);
		params.put("business_key", business_key);
		
		logger.info("轮询开闸结果的参数: {}",params);
		
		long currentTime = System.currentTimeMillis();
		long endTime = currentTime + 5 * 1000;

		/**
		 * 循环查询是否开闸成功, 超过5秒, 则返回失败
		 */
		int s = 0;
		logger.info("***开始查询开关闸的是否成功, temp_plate{}...", tempPlate);
		while (currentTime < endTime) {
			s++;
			String status = noPlateDaoImpl.findOpenStauts(params);
			if (STAUTS_SUCCESS.equals(status)) {
				logger.info("***第{}次查询到车牌: {}的开闸情况成功.", s, tempPlate);
				return true;
			}
			//延迟1秒，进入下次循环
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			currentTime = System.currentTimeMillis();
		}
		logger.info("***车牌: {}的开闸失败", tempPlate);
		return false;
	}
	/**
	 * 无牌车预缴费，根据openid获取车牌
	 * @param code
	 * @param parkid
	 * @param ver
	 * @param useragent
	 * @param model
	 * @return
	 */
	public String noPlatePrepay(String alicode, String code, String parkid, String useragent,
			Model model) {
		/*** 验证参数 */
		if ((code != null && !code.equals("")) || (alicode != null && !alicode.equals(""))) {
			BusinessService bs = destributeFactory.create(useragent);
			String openid = bs.generateOpenid(alicode, code);
			if (openid == null) {
				logger.info("***无牌车预缴费-获取openid失败,");
			}else {
				model.addAttribute("openid", openid);
				NoPlateRecord record = noPlateDaoImpl.selectTempPlateInfo(openid);
				if (record != null) {
					logger.info("***无牌车预缴费-已匹配到无牌车进场数据: {}", record.toString());
					String temp_plate = record.getTemp_plate();
					return plateService.platepay("" + record.getPark_id(), temp_plate, useragent, model);
				}
			}
		}
		logger.info("***无牌车预缴费-未匹配到无牌车进场数据，手输车牌.");
		return "h5_plate";
	}
	
	@Override
	public String exiting(String alicode, String code, String parkid, String channelid, String type, String ver, String useragent,
			Model model) {
		String msg = "无牌车离场失败，请稍后重试";// 默认错误信息提示
		String page = "h5_error";// 默认跳转页面

		/*** 验证参数 */
		if (parkid != null && !parkid.equals("") && channelid != null && !channelid.equals("")) {
			BusinessService bs = destributeFactory.create(useragent);
			String openid = bs.generateOpenid(alicode, code);

			model.addAttribute("parkid", parkid);
			model.addAttribute("openid", openid);
			model.addAttribute("enexType", NoPlateConstants.出场.getValue());
			
			String exit_time = DateTools.Date();

			NoPlateRecord record = noPlateDaoImpl.selectTempPlateInfo(openid);
			if (record != null) {
				logger.info("***无牌车离场-已匹配到无牌车进场数据: {}", record.toString());

				/**
				 * 判断是否入场
				 */
				if (record.getStatus() == NoPlateConstants.待入场.getValue()) {
					/*** 跳转到错误页面 */
					msg += "(未找到主相关订单信息)";
					return BackResultTools.setValue(page, msg, model);
				}
				
				String temp_plate = record.getTemp_plate();
				ScanpayVO scanpayVO = getScanpayVO(parkid, temp_plate, ver);
				try {
					/*** 根据信息查询主订单 */
//					OrderInfo orderInfo = orderInfoDao.getOrderInfo(scanpayVO);
					String orderNum = "17121813573710440";
					if (StringTool.isNotNull(orderNum)) {
						scanpayVO.setOrderid(orderNum);
//						scanpayVO.setOrderid(orderInfo.getOrder_num());
						/*** 获取用户在云端的缴费状态和金额 */
						OrderResponse orderResponse = phpCommService.getOrder(scanpayVO);
						/**
						 * 判断是否在免费时长内
						 */
						if (isFree(orderResponse)) {
							logger.info("无牌车离场-无待缴费,临牌号: {}", temp_plate);
							
							NoPlateExitResponse response = new NoPlateExitResponse();
							response.setParkName(record.getPark_name());
							response.setChannelId(channelid);
							response.setTempPlate(record.getTemp_plate());
							response.setEnterTime(record.getEnter_time());
							response.setExitTime(exit_time);
							response.setPayedPrice(""+orderResponse.getPayed_price());
							return BackResultTools.setValue("h5_out", response, "page", model);
						} else {
							logger.info("无牌车离场-跳到车牌支付,临牌车: {}", temp_plate);
							//更新记录为待缴费状态
							NoPlateRecord updateParams = new NoPlateRecord();
							updateParams.setId(record.getId());
							updateParams.setStatus(2);
							noPlateDaoImpl.updateInfo(updateParams);
							
							return plateService.platepay(parkid, temp_plate, useragent, model);
						}
					} else {
						/*** 跳转到错误页面 */
						logger.error("根据车场id和车牌未找到订单相关信息.. parkid=" + parkid + " ** plate=" + scanpayVO.getPlate()
								+ " ** ticketid =" + scanpayVO.getTicketid());
						msg += "(未找到主相关订单信息)";
						return BackResultTools.setValue(page, msg, model);
					}
				} catch (Exception e) {
					e.printStackTrace();
					logger.error("***无牌车离场-离场时间更新失败, temp_plate: {}, exit_time: {}", record.getTemp_plate(), exit_time);
					/*** 跳转到错误页面 */
					msg += "(查询费用失败)";
					return BackResultTools.setValue(page, msg, model);
				}
			} else {
				logger.error("***未匹配到无牌车进场数据, openid: {}", openid);
				/*** 跳转到错误页面 */
				msg += "(未匹配到入场数据)";
				return BackResultTools.setValue(page, msg, model);
			}

		} else {
			logger.error("参数为空.." + "parkid=" + parkid + "** channelid=" + channelid);
			msg += "(参数为空)";
			return BackResultTools.setValue(page, msg, model);
		}
	}

	public String sendExit(String parkid, String ex_channelId, String tempPlate, String exitTime, String openid, Model model) {
		Map<String, String> resultMap = new HashMap<String, String>();
		
		/*** 验证参数 */
		if (ToolsUtil.isNotNull(parkid) && ToolsUtil.isNotNull(ex_channelId) && ToolsUtil.isNotNull(openid)) {
			
			NoPlateRecord record = noPlateDaoImpl.selectTempPlateInfo(openid);
			
			//匹配到入场记录
			if (record != null) {
				NoPlateRecord updateParams = new NoPlateRecord();
				updateParams.setExit_time(exitTime);
				updateParams.setEx_channel_id(ex_channelId);
				updateParams.setId(record.getId());
				// 修改为待离场状态
				updateParams.setStatus(NoPlateConstants.待离场.getValue());
				if (updateNoPlateRecord(updateParams)) {
					logger.info("***无牌车进场-数据写入成功, {}", record.toString());
					int bu_key = record.getId();
					if (findOpenStatus(parkid, BUSSINESS_CODE_EXIT, "" + bu_key, tempPlate)) {
						resultMap.put("status_code", "200");
						resultMap.put("url", "/opensuccess");
						return DateChangeTools.bean2gson(resultMap);
					}
				}
			}
			
		} else {
			logger.info("必填参数为空..parkid:{}, ex_channelId:{}, tempPlate:{}, exitTime:{},openid:{}", parkid, ex_channelId,
					tempPlate, exitTime, openid);
		}
		resultMap.put("status_code", "403");
		resultMap.put("url", "/openfail");
		return DateChangeTools.bean2gson(resultMap);
	}
	/**
	 * 更新无牌车记录
	 * @param record
	 * @return
	 */
	public boolean updateNoPlateRecord(NoPlateRecord record) {
		int n = noPlateDaoImpl.updateInfo(record);
		if (n > 0) {
			logger.info("***无牌车离场-离场时间和状态更新成功, temp_plate: {}, exit_time: {}", record.getTemp_plate(),
					record.getExit_time());
			return true;
		} else {
			logger.error("***无牌车离场-离场时间和状态更新失败, temp_plate: {}, exit_time: {}", record.getTemp_plate(),
					record.getExit_time());
			return false;
		}
	}

	/**
	 * @return
	 */
	public ScanpayVO getScanpayVO(String parkid, String plate, String ver) {
		ScanpayVO scanpayVO = new ScanpayVO();
		scanpayVO.setParkid(parkid);
		scanpayVO.setPlate(plate);
		scanpayVO.setVer(ver);
		return scanpayVO;
	}

	/**
	 * 判断是否有费用
	 */
	public boolean isFree(OrderResponse orderResponse) {
		if (orderResponse.getStatus() == 1 && orderResponse.getUnpay_price() == 0) {
			return true;
		}
		return false;
	}

	@Override
	public String redirect2NoPlateEnEx(String parkid, String type, String channelid, String ver, String useragent, Model model) {
		String msg = "无牌车进场失败，请稍后重试";// 默认错误信息提示
		String page = "h5_error";// 默认跳转页面
		/*** 验证参数 */
		if (null == parkid || null == ver || "".equals(ver) || null == channelid || "".equals(channelid)) {
			logger.error(
					"参数为空.." + "parkid=" + parkid + "** type=" + type + "** channelid=" + channelid + " ** ver=" + ver);
			msg += "(参数为空)";
			return BackResultTools.setValue(page, msg, model);
		}
		String urlparams = "";
		try {
			useragent = URLEncoder.encode(useragent, "UTF-8");
			urlparams = "parkid=" + parkid + "&type=" + type + "&channelid=" + channelid + "&ver=" + ver + "&useragent="
					+ useragent;
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		
		BusinessService bs = destributeFactory.create(useragent);
		String self_url=urlProfile.getNOPLATEREDIRURL()+"?"+urlparams;
		return "redirect:" + bs.redirectURL(self_url);
	}

	@Override
	public String redirect2GetPlate(String parkid, String useragent,
			Model model) {
		String page = "h5_plate";// 默认跳转页面
		/*** 验证参数 */
		if (null == parkid || "".equals(parkid) || "null".equals(parkid)) {
			logger.info(
					"无牌车场内支付-缺少必填参数.." + " ** parkid=" + parkid);
			return BackResultTools.setValue(page, "", model);
		}
		String urlparams = "";
		try {
			useragent = URLEncoder.encode(useragent, "UTF-8");
			urlparams = "parkid=" + parkid + "&type=" + NoPlateConstants.预缴费.getValue()  + "&useragent="
					+ useragent;
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		
		BusinessService bs = destributeFactory.create(useragent);
		String self_url= urlProfile.getNOPLATEREDIRURL()+"?"+urlparams;
		return "redirect:" + bs.redirectURL(self_url);
	}
}
