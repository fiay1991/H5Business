package com.park.h5business.service.cardpay.impl;

import java.util.Map;

import javax.annotation.Resource;

import org.apache.log4j.Logger;
import org.springframework.stereotype.Repository;

import com.park.h5business.config.ParkConfig;
import com.park.h5business.config.constants.CodeConstants;
import com.park.h5business.dao.OrderInfoDao;
import com.park.h5business.factory.DestributeFactory;
import com.park.h5business.response.OrderResponse;
import com.park.h5business.service.BusinessService;
import com.park.h5business.service.PHPCommService;
import com.park.h5business.service.PullOrderService;
import com.park.h5business.service.cardpay.CardPayService;
import com.park.h5business.tools.DateChangeTools;
import com.park.h5business.tools.DateTools;
import com.park.h5business.tools.ResultTools;
import com.park.h5business.vo.ScanpayVO;

@Repository(value="cardPayServiceImpl")
public class CardPayServiceImpl implements CardPayService {
	
	private Logger logger = Logger.getLogger(getClass());
	
	@Resource(name="orderInfoDaoImpl")
	private OrderInfoDao orderInfoDao;
	
	@Resource(name="pullOrderServiceImpl")
	private PullOrderService pullOrderService;
	
	@Resource(name="phpCommServiceImpl")
	private PHPCommService phpCommService;
	
	@Resource(name="destributeFactory")
	private DestributeFactory destributeFactory;

	@Override
	public String pay(Map<String, String> paramMap) {
		logger.info("** 刷卡支付下单 - 入参：" + DateChangeTools.bean2gson(paramMap));
		String order_num = paramMap.get("order_num");
		// 取出订单部分信息
		ScanpayVO scanpayVO = orderInfoDao.getScanpayvoByOrdernum(order_num);
		logger.info("** 刷卡支付下单 - 订单基本信息：" + DateChangeTools.bean2gson(scanpayVO));
		if(null == scanpayVO) {
			logger.info("** 刷卡支付下单 - 云端订单不存在。");
			return ResultTools.setResponse(CodeConstants.云端订单不存在.getCode());
		}
		// 获取云端缴费状态和信息
		OrderResponse orderResponse = phpCommService.getOrder(scanpayVO);
		logger.info("** 刷卡支付下单 - 订单缴费信息：" + DateChangeTools.bean2gson(orderResponse));
		if(null == orderResponse) {
			logger.info("** 刷卡支付下单 - 云端缴费状态和金额为空。");
			return ResultTools.setResponse(CodeConstants.云端缴费状态和金额为空.getCode());
		}
		// 判断车辆是否离场
		if(orderResponse.getStatus()==1 && orderResponse.getService_status() ==2) {
			logger.info("** 刷卡支付下单 - 车辆已离场。status=1(不欠费) && service_status=2(已完成)");
			return ResultTools.setResponse(CodeConstants.车辆已离场.getCode());
		}
		// 提取未支付费用、上次缴费、缴费状态
		float unpayPrice = orderResponse.getUnpay_price();
		int payTime = orderResponse.getPay_time();
		int status = orderResponse.getStatus();
		// 计算时间差(上次缴费到当前的时间差)
		String payTimeStr = DateTools.secondTostring(payTime);
		long timeSubtract = DateTools.time_interval(payTimeStr, DateTools.secondTostring(DateTools.phpNowDate()));
		// 判断是否重复扫码
		if(status == 1 && (timeSubtract <= ParkConfig.overtime || unpayPrice == 0 && payTime > 0)) {
			logger.info("** 刷卡支付下单 - 重复扫码。status=1(不欠费) && (时间差<超时时间 || unpay_price=0 && pay_time>0(缴过费))");
			return ResultTools.setResponse(CodeConstants.重复扫码.getCode());
		}
		// 判断是否在免费时长内
		if(status == 1 && unpayPrice == 0 && payTime == 0) {
			logger.info("** 刷卡支付下单 - 无需缴费。status=1(不欠费) && unpay_price=0 && pay_time=0");
			return ResultTools.setResponse(CodeConstants.无需缴费.getCode());
		}
		// 判断订单状态是否正常
		if(status != 2 && status != 3) {
			logger.info("** 刷卡支付下单 - 订单状态异常。status!=2 && status!=3");
			return ResultTools.setResponse(CodeConstants.订单状态异常.getCode());
		}
		// 生成子订单
		
//		if(null == order_num_pay) {
//			logger.info("** 刷卡支付下单 - 创建子订单失败。");
//			return ResultTools.setResponse(CodeConstants.创建子订单失败.getCode());
//		}
		return null;
	}
	
}
